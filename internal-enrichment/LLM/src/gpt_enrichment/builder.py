import stix2
from typing import List
from gpt_enrichment.utils import *
from stix2.v21 import _DomainObject, _Observable  # type: ignore

class Observation(NamedTuple):
    """Observation."""

    observable: Optional[_Observable]
    indicator: Optional[stix2.Indicator]
    relationship: Optional[stix2.Relationship]
class ResponseBundleBuilder:
    def __init__(self, llm_response,author,object_markings,confidence,report,external_references,duplicate_report,author_identity):
        self.llm_response = llm_response
        self.author = author
        self.object_markings=object_markings
        self.confidence=confidence
        self._DUMMY_OBJECT_NAME = "LLM Dummy Object"
        self._DESCRIPTION="This report and its contents were generated by the LLM Connector."
        self.report=report
        self.external_references=external_references
        self._INDICATOR_TYPE_TO_OBSERVATION_FACTORY={
            "md5s":OBSERVATION_FACTORY_FILE_MD5,
            "sha1s":OBSERVATION_FACTORY_FILE_SHA1,
            "sha256s":OBSERVATION_FACTORY_FILE_SHA256,
        }
        self.duplicate_report=duplicate_report
        self.author_identity=author_identity
        
    def _create_authors(self) -> List[stix2.Identity]:
        """Create author(s) for the report."""
        return [self.author_identity]
    
    def _create_intrusion_sets(self) -> List[stix2.IntrusionSet]:
        """Create intrusion sets for the report."""
        intrusion_sets = []
        for i in self.llm_response['intrusion_sets']:
            intrusion_sets.append(
                create_intrusion_set(
                    i,
                    self.author,
                    0,
                    self.object_markings,
                    
                )
            )
        return intrusion_sets
    
    def _create_malwares(self) -> List[stix2.Malware]:
        """Create malwares for the report."""
        malwares = []
        for m in self.llm_response['malware']:
            malwares.append(
                create_malware(
                    m['name'],
                    self.author,
                    0,
                    self.object_markings,
                    malware_types=m['types']
                )
            )
        return malwares
    
    def _create_uses_relationships(
        self, intrusion_sets: List[stix2.IntrusionSet], malwares: List[stix2.Malware]
    ) -> List[stix2.Relationship]:
        """Create uses relationships between intrusion sets and malwares."""
        uses_relationships = create_relationships(
            "uses",
            self.author,
            intrusion_sets,
            malwares,
            0,
            self.object_markings
        )
        return uses_relationships
    
    def _create_target_sectors(self) -> List[stix2.Identity]:
        """Create target sectors for the report."""
        target_sectors = []
        for s in self.llm_response['sectors']:
            target_sectors.append(
                create_sector(
                    s,
                    self.author
                )
            )
        
        return target_sectors
    
    def _create_targets_relationships(
        self, source: List[stix2.IntrusionSet|stix2.Malware], target: List[stix2.Identity]
    ) -> List[stix2.Relationship]:
        """Create targets relationships between intrusion sets and target sectors."""
        targets_relationships =create_relationships(
            "targets",
            self.author,
            source,
            target,
            self.confidence,
            self.object_markings
        )
        return targets_relationships
    
    def _create_target_countries(self) -> List[stix2.Identity]:
        """Create target countries for the report."""
        target_countries = []
        for c in self.llm_response['victim_countries']:
            target_countries.append(
                create_country(
                    c,
                    self.author
                )
            )
        return target_countries
    
    def _create_vulnerabilities(self) -> List[stix2.Vulnerability]:
        """Create vulnerabilities for the report."""
        vulnerabilities = []
        for v in self.llm_response['vulnerabilities']:
            vulnerabilities.append(
                create_vulnerability(
                    v,
                    self.author,
                    self.confidence,
                    self.object_markings,
                    object_markings=self.object_markings
                )
            )
        return vulnerabilities
    
    def _create_victim_organization(self) -> stix2.Identity:
        """Create organization for the report."""
        return [create_organization(
            self.llm_response['victim_organization'],
            self.author
        )]
    
    def build_file_observables(self, blog : dict) -> list[stix2.File|stix2.Indicator]:
        objects=[]
        all_hashes=[]
        all_hashes.extend([("md5",md5) for md5 in blog['observables']['md5s']])
        all_hashes.extend([("sha1",sha1) for sha1 in blog['observables']['sha1s']])
        all_hashes.extend([("sha256",sha256) for sha256 in blog['observables']['sha256s']])
        
        for hash_type,hash_value in all_hashes:
            
            factory=OBSERVATION_FACTORY_FILE_MD5 if hash_type=="md5" else OBSERVATION_FACTORY_FILE_SHA1 if hash_type=="sha1" else OBSERVATION_FACTORY_FILE_SHA256
               
   
    
    def _create_observations(self, report_external_references: List[stix2.ExternalReference]) -> List[Observation]:
        """Create observations for the report."""
        observations = []
        for indicator_type in self.llm_response['observables'].keys():
            try:
                factory=self._INDICATOR_TYPE_TO_OBSERVATION_FACTORY[indicator_type]
            except KeyError:
                continue#some indicator types do not have factories
            
            for indicator_value in self.llm_response['observables'][indicator_type]:
                observable=factory.create_observable(
                    ObservableProperties(
                        indicator_value,self.author_identity,[],[]
                    )
                )
                    
                indicator_pattern=factory.create_indicator_pattern(indicator_value)

                pattern_type='stix' #TODO:move this to member field
                indicator=create_indicator(
                    indicator_pattern.pattern,
                    pattern_type,
                    self.author,
                    indicator_value
                )
                indicator_based_on_observable=create_relationship(
                    "based-on",
                    self.author,
                    indicator,
                    observable,
                    self.confidence,
                    self.object_markings
                )
                observations.append(
                    Observation(
                        observable,
                        indicator,
                        indicator_based_on_observable
                    )
                )
                
                
        return observations
            
    
    
    def _create_indicates_relationships(
        self, indicators: List[stix2.Indicator], entities: List[stix2.IntrusionSet|stix2.Malware]
    ) -> List[stix2.Relationship]:
        """Create indicates relationships between indicators and entities."""
        indicates_relationships =create_relationships(
            "indicates",
            self.author,
            indicators,
            entities,
            self.confidence,
            self.object_markings
        )
        return indicates_relationships
    
    def _create_external_references(self) -> List[stix2.ExternalReference]:
        return [
            stix2.ExternalReference(
                source_name="LLM",
                url=external_reference
            )
         for external_reference in self.external_references
         ]
       
    

    
    def _create_dummy_object(self) -> stix2.Identity:
        return create_organization(self._DUMMY_OBJECT_NAME, self.author)
    
    def _create_report(self, objects: List[_DomainObject]) -> stix2.Report:
        
        return [create_report(
            self.report['name'] if not self.duplicate_report else "LLM Generated - "+self.report['name'],
            self.report['published'],
            objects,
            created_by=self.author,
            created=self.report['created'],
            modified=None,
            description=self._DESCRIPTION,
            report_types=None,
            labels=None,
            confidence=self.confidence,
            external_references=self.external_references,
            object_markings=None,
            x_opencti_report_status=None,
        )]
    
    
            

        
    
    def build(self) -> stix2.Bundle:
        bundle_objects= []
        
        # Create author(s) and add to bundle.
        # authors = self._create_authors()
        # bundle_objects.extend(authors)

        # Create intrusion sets and add to bundle.
        intrusion_sets = self._create_intrusion_sets()
        bundle_objects.extend(intrusion_sets)

        # Create malwares and add to bundle.
        malwares = self._create_malwares()
        bundle_objects.extend(malwares)
        
        #Create victim organization and add to bundle
        victim_organization=self._create_victim_organization()
        bundle_objects.extend(victim_organization)
        
        malwares_targets_organization=create_targets_relationships(
            self.author,
            malwares,
            victim_organization,
            self.confidence,
            self.object_markings
        )
        
        bundle_objects.extend(malwares_targets_organization)
        
        intrusion_sets_targets_organization=create_targets_relationships(
            self.author,
            intrusion_sets,
            victim_organization,
            self.confidence,
            self.object_markings
        )
        
        bundle_objects.extend(intrusion_sets_targets_organization)
        
        
        
        

        # Intrusion sets use malwares and add to bundle.
        intrusion_sets_use_malwares = self._create_uses_relationships(
            intrusion_sets, malwares
        )
        bundle_objects.extend(intrusion_sets_use_malwares)

        # Create target sectors and add to bundle.
        target_sectors = self._create_target_sectors()
        bundle_objects.extend(target_sectors)

        # Intrusion sets target sectors and add to bundle.
        intrusion_sets_target_sectors = self._create_targets_relationships(
            intrusion_sets, target_sectors
        )
        bundle_objects.extend(intrusion_sets_target_sectors)

        # Malwares target sectors and add to bundle.
        malwares_target_sectors = self._create_targets_relationships(
            malwares, target_sectors
        )
        bundle_objects.extend(malwares_target_sectors)

        # Create target countries and add to bundle.
        target_countries = self._create_target_countries()
        bundle_objects.extend(target_countries)

        # Intrusion sets target countries and add to bundle.
        intrusion_sets_target_countries = self._create_targets_relationships(
            intrusion_sets, target_countries
        )
        bundle_objects.extend(intrusion_sets_target_countries)

        # Malwares target countries and add to bundle.
        malwares_target_countries = self._create_targets_relationships(
            malwares, target_countries
        )
        bundle_objects.extend(malwares_target_countries)
        
        #Create relationships between victim organization and sectors
        organization_related_to_sector=create_relationships(
            "related-to",
            self.author,
            victim_organization,
            target_sectors,
            self.confidence,
            self.object_markings
        )
        
        bundle_objects.extend(organization_related_to_sector)
        
        #Create relationships between victim organization and countries
        organization_related_to_country=create_relationships(
            "related-to",
            self.author,
            victim_organization,
            target_countries,
            self.confidence,
            self.object_markings
        )
        
        bundle_objects.extend(organization_related_to_country)
             
        # Create vulnerabilities and add to bundle.
        vulnerabilities = self._create_vulnerabilities()
        bundle_objects.extend(vulnerabilities)
        
        # Intrusion sets target vulnerabilities and add to bundle.
        intrusion_sets_target_vulnerabilities = self._create_targets_relationships(
            intrusion_sets, vulnerabilities
        )
        bundle_objects.extend(intrusion_sets_target_vulnerabilities)

        # Malwares target vulnerabilities and add to bundle.
        malwares_target_vulnerabilities = self._create_targets_relationships(
            malwares, vulnerabilities
        )
        bundle_objects.extend(malwares_target_vulnerabilities)

        # Create observations.
        observations = self._create_observations(self.external_references)

        # Get observables and add to bundle.
        observables = [o.observable for o in observations if o.observable is not None]
        bundle_objects.extend(observables)
        
        # Get indicators, create YARA indicators and to bundle.
        indicators = [o.indicator for o in observations if o.indicator is not None]
        bundle_objects.extend(indicators)

        # Get observation relationships and add to bundle.
        indicators_based_on_observables = [
            o.relationship for o in observations if o.relationship is not None
        ]
        bundle_objects.extend(indicators_based_on_observables)

        # Indicator indicates entities and add to bundle.
        indicator_indicates_intrusion_sets=[]
        indicator_indicates_malwares=[]
        if len(intrusion_sets) == 1:
            indicator_indicates_intrusion_sets = self._create_indicates_relationships(
                indicators, intrusion_sets
            )
            bundle_objects.extend(indicator_indicates_intrusion_sets)
        if len(malwares) == 1:
            print("Creating relationships between indicators and malware")
            indicator_indicates_malwares = self._create_indicates_relationships(
                indicators, malwares
            )
            print("Created following relationships between indicators and malware:\n ",indicator_indicates_malwares)
            bundle_objects.extend(indicator_indicates_malwares)
        

        # Create object references for the report.
        object_refs = create_object_refs(
            intrusion_sets,
            malwares,
            victim_organization,
            intrusion_sets_use_malwares,
            target_sectors,
            intrusion_sets_target_sectors,
            malwares_target_sectors,
            target_countries,
            intrusion_sets_target_countries,
            malwares_target_countries,
            vulnerabilities,
            intrusion_sets_target_vulnerabilities,
            malwares_target_vulnerabilities,
            observables,
            indicators,
            indicators_based_on_observables,
            indicator_indicates_intrusion_sets,
            indicator_indicates_malwares,
            organization_related_to_sector,
            organization_related_to_country
        )

        # Hack, the report must have at least on object reference.
        if not object_refs:
            dummy_object = self._create_dummy_object()

            bundle_objects.append(dummy_object)
            object_refs.append(dummy_object)

        # Create a report and add to bundle.
        reports = self._create_report(object_refs)
        bundle_objects.extend(reports)
        bundle_objects=[o for o in bundle_objects if type(o)!=str]
        
        
        
        return stix2.Bundle(objects=bundle_objects, allow_custom=True)