
from pydantic import BaseModel,StringConstraints,Field
from typing import Annotated, Optional,Union, List
class TriageSignatureModel(BaseModel):
    signature: str
    score: int

class VxCubeBehaviourModel(BaseModel):
    threat_level: str
    rule: str

class TriageModel(BaseModel):
    malware_family: Union[str, None]
    score: int
    link: str
    tags: List[str]
    signatures: List[TriageSignatureModel]

class FileScanIOModel(BaseModel):
    verdict: str
    threat_level: float
    confidence: float
    report_link: str
    
class VxCubeModel(BaseModel):
    verdict: str
    maliciousness: int
    behaviour: List[VxCubeBehaviourModel]

class IntezerModel(BaseModel):
    verdict: str
    family_name: Union[str, None]
    analysis_url: str

class UnPacMeModel(BaseModel):
    sha256_hash: Annotated[str, StringConstraints(regex=r"^[a-fA-F0-9]{64}$")]
    md5_hash: Annotated[str, StringConstraints(regex=r"^[a-fA-F0-9]{32}$")]
    sha1_hash: Annotated[str, StringConstraints(regex=r"^[a-fA-F0-9]{40}$")]
    detections: List[str]
    link: str

class CapeModel(BaseModel):
    detection: Union[str, None]
    link: str
    
class MWDBModel(BaseModel):
    detection: Union[str, None]
    link: str
    
class ReversingLabsModel(BaseModel):
    threat_name: str
    status: str
    first_seen: str
    scanner_count: int
    scanner_match: int
    scanner_percent: float
    
class SpamhausModel(BaseModel):
    detection: str
    link: str
    
    

class VendorIntelModel(BaseModel,extra="allow"):
    MWDB: Optional[MWDBModel]=Field(None,alias="CERT-PL_MWDB")
    CAPE: Optional[CapeModel]
    Triage: Optional[TriageModel]
    ReversingLabs: Optional[ReversingLabsModel]
    Spamhaus_HBL: Optional[SpamhausModel]
    vxCuve: Optional[VxCubeModel]
        
    
    
