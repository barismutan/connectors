
from pydantic import BaseModel,StringConstraints,Field,validator
from typing import Annotated, Optional,Union, List, Literal
class TriageSignatureModel(BaseModel):
    signature: str
    score: Union[int, None]
    
    @validator('score', pre=True,allow_reuse=True)
    def score_to_int(cls,v):
        if v is None:
            return v
        return int(v)
    

class VxCubeBehaviourModel(BaseModel):
    threat_level: str
    rule: str

class TriageModel(BaseModel):
    malware_family: Union[str, None]
    score: Union[int, None]
    link: str
    tags: List[str]
    signatures: List[TriageSignatureModel]
    
    @validator('score', pre=True,allow_reuse=True)
    def score_to_int(cls,v):
        if v is None:
            return v
        return int(v)

class FileScanIOModel(BaseModel):
    verdict: str
    threat_level: float
    confidence: float
    report_link: str
    
    @validator('threat_level','confidence', pre=True,allow_reuse=True)
    def threat_level_to_float(cls,v):
        return float(v)
    
    
    
class VxCubeModel(BaseModel):
    verdict: str
    maliciousness: int
    behaviour: List[VxCubeBehaviourModel]
    
    @validator('maliciousness', pre=True,allow_reuse=True)
    def maliciousness_to_int(cls,v):
        return int(v)

class IntezerModel(BaseModel):
    verdict: str
    family_name: Union[str, None]
    analysis_url: str

class UnPacMeModel(BaseModel):
    sha256_hash: Annotated[str, StringConstraints(pattern=r"^[a-fA-F0-9]{64}$")]
    md5_hash: Annotated[str, StringConstraints(pattern=r"^[a-fA-F0-9]{32}$")]
    sha1_hash: Annotated[str, StringConstraints(pattern=r"^[a-fA-F0-9]{40}$")]
    detections: List[str]
    link: str

class CapeModel(BaseModel):
    detection: Union[str, None]
    link: str
    
class MWDBModel(BaseModel):
    detection: Union[str, None]
    link: str
    
class ReversingLabsModel(BaseModel):
    threat_name: str
    status: str
    first_seen: str
    scanner_count: int
    scanner_match: int
    scanner_percent: float
    
    @validator('scanner_percent', pre=True,allow_reuse=True)
    def scanner_percent_to_float(cls,v):
        return float(v)
    
    @validator('scanner_match','scanner_count', pre=True,allow_reuse=True)
    def scanner_match_to_int(cls,v):
        return int(v)
    
class SpamhausModel(BaseModel):
    detection: str
    link: str
    

class VendorIntelModel(BaseModel,extra="allow"):
    MWDB: Optional[MWDBModel]=Field(alias="CERT-PL_MWDB")
    CAPE: Optional[CapeModel]=None
    Triage: Optional[TriageModel]=None
    ReversingLabs: Optional[ReversingLabsModel]=None
    Spamhaus_HBL: Optional[List[SpamhausModel]]= None
    vxCube: Optional[VxCubeModel] = None
        
    
    
