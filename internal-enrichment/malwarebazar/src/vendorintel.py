import json
from pycti import OpenCTIConnectorHelper

class VendorIntel:

    def __init__(self,config) -> None:
        self.helper = OpenCTIConnectorHelper(config)
        self.vendor_function_map={
            "Triage":self.__extract_triage,
            "CAPE":self.__extract_cape,
            "UnpacMe":self.__extract_unpacme,
            "VMRay":self.__extract_vmray,
            "Intezer":self.__extract_intezer,
            "vxCube":self.__extract_vxcube,
            "ANY.RUN":self.__extract_anyrun,
            "FileScan-IO":self.__extract_filescanio
        }
    
    def __add_intel_note(self,observable_id,note,vendor):
        self.helper.api.note.create(
            content=note,
            objects=[observable_id],
            abstract="Results from {}".format(vendor),
        )
    

    def __extract_triage(self,observable_id,data):
        external_reference=self.helper.api.external_reference.create(
            source_name="Hatching Triage",
            url=data["link"],
            description="Hatching Triage Report found on MalwareBazar",
        )
        
        self.helper.api.stix_cyber_observable.add_external_reference(
            id=observable_id, external_reference_id=external_reference["id"]
        )
    

    def __extract_cape(self,observable_id,data):
        external_reference = self.helper.api.external_reference.create(
            source_name="CAPE Sandbox",
            url=data["link"],
            description="CAPE Sandbox Report found on MalwareBazar",
        )

        self.helper.api.stix_cyber_observable.add_external_reference(
            id=observable_id, external_reference_id=external_reference["id"]
        )



    def __extract_unpacme(self,observable_id,data):
        external_reference = self.helper.api.external_reference.create(
            source_name="UnpacMe",
            url=data[0]["link"],
            description="UnpacMe Report found on MalwareBazar",
        )

        self.helper.api.stix_cyber_observable.add_external_reference(
            id=observable_id, external_reference_id=external_reference["id"]
        )



    def __extract_vmray(self,observable_id,data):
        external_reference = self.helper.api.external_reference.create(
            source_name="VMRay",
            url=data["report_link"],
            description="VMRay Report found on MalwareBazar",
        )
        self.helper.api.stix_cyber_observable.add_external_reference(
            id=observable_id, external_reference_id=external_reference["id"]
        )



    def __extract_intezer(self,observable_id,data):

        external_reference = self.helper.api.external_reference.create(
            source_name="Intezer",
            url=data["analysis_url"],
            description="Intezer Report found on MalwareBazar",
        )

        self.helper.api.stix_cyber_observable.add_external_reference(
            id=observable_id, external_reference_id=external_reference["id"]
        )



    def __extract_vxcube(self,observable_id,data):
        pass

    def __extract_anyrun(self,observable_id,data):

        external_reference = self.helper.api.external_reference.create(
            source_name="ANY.RUN",
            url=data["analysis_url"],
            description="ANY.RUN Report found on MalwareBazar",
        )

        self.helper.api.stix_cyber_observable.add_external_reference(
            id=observable_id, external_reference_id=external_reference["id"]
        )


    def __extract_filescanio(self,observable_id,data):

        external_reference = self.helper.api.external_reference.create(
            source_name="Filescan.io",
            url=data["report_link"],
            description="Filescan.io Report found on MalwareBazar",
        )

        self.helper.api.stix_cyber_observable.add_external_reference(
            id=observable_id, external_reference_id=external_reference["id"]
        )

    def extract_vendor_intel(self,observable_id,data,vendor):
        print("Data passed to extract_vendor_intel:", data)
        vendor_data = data[vendor]
        self.vendor_function_map[vendor](observable_id,vendor_data)
        self.__add_intel_note(observable_id,json.dumps(vendor_data),vendor)

